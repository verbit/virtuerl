%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.19.8
%% Version source: file
-module(port_forwarding_pb).

-export([encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/3, merge_msgs/4]).
-export([verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).
-export([gpb_version_source/0]).


%% enumerated types

-export_type([]).

%% message types
-type port_forwarding_identifier() ::
      #{host                    => unicode:chardata(), % = 1, optional
        protocol                => unicode:chardata(), % = 2, optional
        source_port             => non_neg_integer() % = 3, optional, 32 bits
       }.

-type port_forwarding() ::
      #{protocol                => unicode:chardata(), % = 2, optional
        source_port             => non_neg_integer(), % = 3, optional, 32 bits
        target_ip               => unicode:chardata(), % = 4, optional
        target_port             => non_neg_integer() % = 5, optional, 32 bits
       }.

-type list_port_forwardings_request() ::
      #{host                    => unicode:chardata() % = 1, optional
       }.

-type list_port_forwardings_response() ::
      #{port_forwardings        => [port_forwarding()] % = 1, repeated
       }.

-type put_port_forwarding_request() ::
      #{port_forwarding         => port_forwarding(), % = 1, optional
        host                    => unicode:chardata() % = 2, optional
       }.

-type empty() ::
      #{
       }.

-export_type(['port_forwarding_identifier'/0, 'port_forwarding'/0, 'list_port_forwardings_request'/0, 'list_port_forwardings_response'/0, 'put_port_forwarding_request'/0, 'empty'/0]).
-type '$msg_name'() :: port_forwarding_identifier | port_forwarding | list_port_forwardings_request | list_port_forwardings_response | put_port_forwarding_request | empty.
-type '$msg'() :: port_forwarding_identifier() | port_forwarding() | list_port_forwardings_request() | list_port_forwardings_response() | put_port_forwarding_request() | empty().
-export_type(['$msg_name'/0, '$msg'/0]).

-if(?OTP_RELEASE >= 24).
-dialyzer({no_underspecs, encode_msg/2}).
-endif.
-spec encode_msg('$msg'(), '$msg_name'()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) -> encode_msg(Msg, MsgName, []).

-if(?OTP_RELEASE >= 24).
-dialyzer({no_underspecs, encode_msg/3}).
-endif.
-spec encode_msg('$msg'(), '$msg_name'(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
        true -> verify_msg(Msg, MsgName, Opts);
        false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        port_forwarding_identifier -> encode_msg_port_forwarding_identifier(id(Msg, TrUserData), TrUserData);
        port_forwarding -> encode_msg_port_forwarding(id(Msg, TrUserData), TrUserData);
        list_port_forwardings_request -> encode_msg_list_port_forwardings_request(id(Msg, TrUserData), TrUserData);
        list_port_forwardings_response -> encode_msg_list_port_forwardings_response(id(Msg, TrUserData), TrUserData);
        put_port_forwarding_request -> encode_msg_put_port_forwarding_request(id(Msg, TrUserData), TrUserData);
        empty -> encode_msg_empty(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_port_forwarding_identifier(Msg, TrUserData) -> encode_msg_port_forwarding_identifier(Msg, <<>>, TrUserData).


encode_msg_port_forwarding_identifier(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{host := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{protocol := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     case is_empty_string(TrF2) of
                         true -> B1;
                         false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    case M of
        #{source_port := F3} ->
            begin
                TrF3 = id(F3, TrUserData),
                if TrF3 =:= 0 -> B2;
                   true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
                end
            end;
        _ -> B2
    end.

encode_msg_port_forwarding(Msg, TrUserData) -> encode_msg_port_forwarding(Msg, <<>>, TrUserData).


encode_msg_port_forwarding(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{protocol := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false -> e_type_string(TrF1, <<Bin/binary, 18>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{source_port := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     if TrF2 =:= 0 -> B1;
                        true -> e_varint(TrF2, <<B1/binary, 24>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    B3 = case M of
             #{target_ip := F3} ->
                 begin
                     TrF3 = id(F3, TrUserData),
                     case is_empty_string(TrF3) of
                         true -> B2;
                         false -> e_type_string(TrF3, <<B2/binary, 34>>, TrUserData)
                     end
                 end;
             _ -> B2
         end,
    case M of
        #{target_port := F4} ->
            begin
                TrF4 = id(F4, TrUserData),
                if TrF4 =:= 0 -> B3;
                   true -> e_varint(TrF4, <<B3/binary, 40>>, TrUserData)
                end
            end;
        _ -> B3
    end.

encode_msg_list_port_forwardings_request(Msg, TrUserData) -> encode_msg_list_port_forwardings_request(Msg, <<>>, TrUserData).


encode_msg_list_port_forwardings_request(#{} = M, Bin, TrUserData) ->
    case M of
        #{host := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                case is_empty_string(TrF1) of
                    true -> Bin;
                    false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_list_port_forwardings_response(Msg, TrUserData) -> encode_msg_list_port_forwardings_response(Msg, <<>>, TrUserData).


encode_msg_list_port_forwardings_response(#{} = M, Bin, TrUserData) ->
    case M of
        #{port_forwardings := F1} ->
            TrF1 = id(F1, TrUserData),
            if TrF1 == [] -> Bin;
               true -> e_field_list_port_forwardings_response_port_forwardings(TrF1, Bin, TrUserData)
            end;
        _ -> Bin
    end.

encode_msg_put_port_forwarding_request(Msg, TrUserData) -> encode_msg_put_port_forwarding_request(Msg, <<>>, TrUserData).


encode_msg_put_port_forwarding_request(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{port_forwarding := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     if TrF1 =:= undefined -> Bin;
                        true -> e_mfield_put_port_forwarding_request_port_forwarding(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{host := F2} ->
            begin
                TrF2 = id(F2, TrUserData),
                case is_empty_string(TrF2) of
                    true -> B1;
                    false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                end
            end;
        _ -> B1
    end.

encode_msg_empty(_Msg, _TrUserData) -> <<>>.

e_mfield_list_port_forwardings_response_port_forwardings(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_port_forwarding(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_list_port_forwardings_response_port_forwardings([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_list_port_forwardings_response_port_forwardings(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_list_port_forwardings_response_port_forwardings(Rest, Bin3, TrUserData);
e_field_list_port_forwardings_response_port_forwardings([], Bin, _TrUserData) -> Bin.

e_mfield_put_port_forwarding_request_port_forwarding(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_port_forwarding(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 -> e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) -> e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData) when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData) when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) -> <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) -> <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) -> <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) -> <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) -> <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) -> <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) -> <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) -> <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_unknown_elems/2}).
e_unknown_elems([Elem | Rest], Bin) ->
    BinR = case Elem of
               {varint, FNum, N} ->
                   BinF = e_varint(FNum bsl 3, Bin),
                   e_varint(N, BinF);
               {length_delimited, FNum, Data} ->
                   BinF = e_varint(FNum bsl 3 bor 2, Bin),
                   BinL = e_varint(byte_size(Data), BinF),
                   <<BinL/binary, Data/binary>>;
               {group, FNum, GroupFields} ->
                   Bin1 = e_varint(FNum bsl 3 bor 3, Bin),
                   Bin2 = e_unknown_elems(GroupFields, Bin1),
                   e_varint(FNum bsl 3 bor 4, Bin2);
               {fixed32, FNum, V} ->
                   BinF = e_varint(FNum bsl 3 bor 5, Bin),
                   <<BinF/binary, V:32/little>>;
               {fixed64, FNum, V} ->
                   BinF = e_varint(FNum bsl 3 bor 1, Bin),
                   <<BinF/binary, V:64/little>>
           end,
    e_unknown_elems(Rest, BinR);
e_unknown_elems([], Bin) -> Bin.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) -> not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
        true -> true;
        false -> string_has_chars(T)
    end;
string_has_chars(B) when is_binary(B), byte_size(B) =/= 0 -> true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) -> decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch
        error:{gpb_error,_}=Reason:StackTrace ->
            erlang:raise(error, Reason, StackTrace);
        Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch
        error:{gpb_error,_}=Reason ->
            erlang:raise(error, Reason,
                         erlang:get_stacktrace());
        Class:Reason ->
            StackTrace = erlang:get_stacktrace(),
            error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit(port_forwarding_identifier, Bin, TrUserData) -> id(decode_msg_port_forwarding_identifier(Bin, TrUserData), TrUserData);
decode_msg_2_doit(port_forwarding, Bin, TrUserData) -> id(decode_msg_port_forwarding(Bin, TrUserData), TrUserData);
decode_msg_2_doit(list_port_forwardings_request, Bin, TrUserData) -> id(decode_msg_list_port_forwardings_request(Bin, TrUserData), TrUserData);
decode_msg_2_doit(list_port_forwardings_response, Bin, TrUserData) -> id(decode_msg_list_port_forwardings_response(Bin, TrUserData), TrUserData);
decode_msg_2_doit(put_port_forwarding_request, Bin, TrUserData) -> id(decode_msg_put_port_forwarding_request(Bin, TrUserData), TrUserData);
decode_msg_2_doit(empty, Bin, TrUserData) -> id(decode_msg_empty(Bin, TrUserData), TrUserData).



decode_msg_port_forwarding_identifier(Bin, TrUserData) -> dfp_read_field_def_port_forwarding_identifier(Bin, 0, 0, 0, id(<<>>, TrUserData), id(<<>>, TrUserData), id(0, TrUserData), TrUserData).

dfp_read_field_def_port_forwarding_identifier(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_port_forwarding_identifier_host(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_port_forwarding_identifier(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_port_forwarding_identifier_protocol(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_port_forwarding_identifier(<<24, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_port_forwarding_identifier_source_port(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_port_forwarding_identifier(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #{host => F@_1, protocol => F@_2, source_port => F@_3};
dfp_read_field_def_port_forwarding_identifier(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_port_forwarding_identifier(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_port_forwarding_identifier(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_port_forwarding_identifier(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_port_forwarding_identifier(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_port_forwarding_identifier_host(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        18 -> d_field_port_forwarding_identifier_protocol(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        24 -> d_field_port_forwarding_identifier_source_port(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_port_forwarding_identifier(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                1 -> skip_64_port_forwarding_identifier(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                2 -> skip_length_delimited_port_forwarding_identifier(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                3 -> skip_group_port_forwarding_identifier(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                5 -> skip_32_port_forwarding_identifier(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
dg_read_field_def_port_forwarding_identifier(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #{host => F@_1, protocol => F@_2, source_port => F@_3}.

d_field_port_forwarding_identifier_host(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_port_forwarding_identifier_host(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_port_forwarding_identifier_host(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_port_forwarding_identifier(RestF, 0, 0, F, NewFValue, F@_2, F@_3, TrUserData).

d_field_port_forwarding_identifier_protocol(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_port_forwarding_identifier_protocol(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_port_forwarding_identifier_protocol(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_port_forwarding_identifier(RestF, 0, 0, F, F@_1, NewFValue, F@_3, TrUserData).

d_field_port_forwarding_identifier_source_port(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_port_forwarding_identifier_source_port(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_port_forwarding_identifier_source_port(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_port_forwarding_identifier(RestF, 0, 0, F, F@_1, F@_2, NewFValue, TrUserData).

skip_varint_port_forwarding_identifier(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_port_forwarding_identifier(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
skip_varint_port_forwarding_identifier(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_port_forwarding_identifier(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_port_forwarding_identifier(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_port_forwarding_identifier(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_port_forwarding_identifier(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_port_forwarding_identifier(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

skip_group_port_forwarding_identifier(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_port_forwarding_identifier(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, TrUserData).

skip_32_port_forwarding_identifier(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_port_forwarding_identifier(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_64_port_forwarding_identifier(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_port_forwarding_identifier(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

decode_msg_port_forwarding(Bin, TrUserData) -> dfp_read_field_def_port_forwarding(Bin, 0, 0, 0, id(<<>>, TrUserData), id(0, TrUserData), id(<<>>, TrUserData), id(0, TrUserData), TrUserData).

dfp_read_field_def_port_forwarding(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_port_forwarding_protocol(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_port_forwarding(<<24, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_port_forwarding_source_port(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_port_forwarding(<<34, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_port_forwarding_target_ip(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_port_forwarding(<<40, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_port_forwarding_target_port(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_port_forwarding(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, _) -> #{protocol => F@_1, source_port => F@_2, target_ip => F@_3, target_port => F@_4};
dfp_read_field_def_port_forwarding(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dg_read_field_def_port_forwarding(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_port_forwarding(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 32 - 7 -> dg_read_field_def_port_forwarding(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_port_forwarding(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        18 -> d_field_port_forwarding_protocol(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        24 -> d_field_port_forwarding_source_port(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        34 -> d_field_port_forwarding_target_ip(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        40 -> d_field_port_forwarding_target_port(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_port_forwarding(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                1 -> skip_64_port_forwarding(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                2 -> skip_length_delimited_port_forwarding(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                3 -> skip_group_port_forwarding(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                5 -> skip_32_port_forwarding(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData)
            end
    end;
dg_read_field_def_port_forwarding(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, _) -> #{protocol => F@_1, source_port => F@_2, target_ip => F@_3, target_port => F@_4}.

d_field_port_forwarding_protocol(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_port_forwarding_protocol(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_port_forwarding_protocol(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_port_forwarding(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, TrUserData).

d_field_port_forwarding_source_port(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_port_forwarding_source_port(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_port_forwarding_source_port(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_port_forwarding(RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, TrUserData).

d_field_port_forwarding_target_ip(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_port_forwarding_target_ip(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_port_forwarding_target_ip(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_port_forwarding(RestF, 0, 0, F, F@_1, F@_2, NewFValue, F@_4, TrUserData).

d_field_port_forwarding_target_port(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_port_forwarding_target_port(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_port_forwarding_target_port(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_port_forwarding(RestF, 0, 0, F, F@_1, F@_2, F@_3, NewFValue, TrUserData).

skip_varint_port_forwarding(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> skip_varint_port_forwarding(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_varint_port_forwarding(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_port_forwarding(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_port_forwarding(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> skip_length_delimited_port_forwarding(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_length_delimited_port_forwarding(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_port_forwarding(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_group_port_forwarding(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_port_forwarding(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_32_port_forwarding(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_port_forwarding(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_64_port_forwarding(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_port_forwarding(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

decode_msg_list_port_forwardings_request(Bin, TrUserData) -> dfp_read_field_def_list_port_forwardings_request(Bin, 0, 0, 0, id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_list_port_forwardings_request(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_list_port_forwardings_request_host(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_list_port_forwardings_request(<<>>, 0, 0, _, F@_1, _) -> #{host => F@_1};
dfp_read_field_def_list_port_forwardings_request(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_list_port_forwardings_request(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_list_port_forwardings_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_list_port_forwardings_request(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_list_port_forwardings_request(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_list_port_forwardings_request_host(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_list_port_forwardings_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_list_port_forwardings_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_list_port_forwardings_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_list_port_forwardings_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_list_port_forwardings_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_list_port_forwardings_request(<<>>, 0, 0, _, F@_1, _) -> #{host => F@_1}.

d_field_list_port_forwardings_request_host(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_list_port_forwardings_request_host(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_list_port_forwardings_request_host(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_list_port_forwardings_request(RestF, 0, 0, F, NewFValue, TrUserData).

skip_varint_list_port_forwardings_request(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_list_port_forwardings_request(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_list_port_forwardings_request(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_list_port_forwardings_request(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_list_port_forwardings_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_list_port_forwardings_request(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_list_port_forwardings_request(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_list_port_forwardings_request(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_list_port_forwardings_request(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_list_port_forwardings_request(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_list_port_forwardings_request(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_list_port_forwardings_request(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_list_port_forwardings_request(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_list_port_forwardings_request(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_list_port_forwardings_response(Bin, TrUserData) -> dfp_read_field_def_list_port_forwardings_response(Bin, 0, 0, 0, id([], TrUserData), TrUserData).

dfp_read_field_def_list_port_forwardings_response(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_list_port_forwardings_response_port_forwardings(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_list_port_forwardings_response(<<>>, 0, 0, _, R1, TrUserData) ->
    S1 = #{},
    if R1 == '$undef' -> S1;
       true -> S1#{port_forwardings => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_list_port_forwardings_response(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_list_port_forwardings_response(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_list_port_forwardings_response(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_list_port_forwardings_response(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_list_port_forwardings_response(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_list_port_forwardings_response_port_forwardings(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_list_port_forwardings_response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_list_port_forwardings_response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_list_port_forwardings_response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_list_port_forwardings_response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_list_port_forwardings_response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_list_port_forwardings_response(<<>>, 0, 0, _, R1, TrUserData) ->
    S1 = #{},
    if R1 == '$undef' -> S1;
       true -> S1#{port_forwardings => lists_reverse(R1, TrUserData)}
    end.

d_field_list_port_forwardings_response_port_forwardings(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_list_port_forwardings_response_port_forwardings(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_list_port_forwardings_response_port_forwardings(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_port_forwarding(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_list_port_forwardings_response(RestF, 0, 0, F, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_list_port_forwardings_response(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_list_port_forwardings_response(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_list_port_forwardings_response(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_list_port_forwardings_response(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_list_port_forwardings_response(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_list_port_forwardings_response(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_list_port_forwardings_response(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_list_port_forwardings_response(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_list_port_forwardings_response(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_list_port_forwardings_response(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_list_port_forwardings_response(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_list_port_forwardings_response(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_list_port_forwardings_response(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_list_port_forwardings_response(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_put_port_forwarding_request(Bin, TrUserData) -> dfp_read_field_def_put_port_forwarding_request(Bin, 0, 0, 0, id('$undef', TrUserData), id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_put_port_forwarding_request(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_put_port_forwarding_request_port_forwarding(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_put_port_forwarding_request(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_put_port_forwarding_request_host(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_put_port_forwarding_request(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    S1 = #{host => F@_2},
    if F@_1 == '$undef' -> S1;
       true -> S1#{port_forwarding => F@_1}
    end;
dfp_read_field_def_put_port_forwarding_request(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_put_port_forwarding_request(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_put_port_forwarding_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_put_port_forwarding_request(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_put_port_forwarding_request(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_put_port_forwarding_request_port_forwarding(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> d_field_put_port_forwarding_request_host(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_put_port_forwarding_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_put_port_forwarding_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_put_port_forwarding_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_put_port_forwarding_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_put_port_forwarding_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_put_port_forwarding_request(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    S1 = #{host => F@_2},
    if F@_1 == '$undef' -> S1;
       true -> S1#{port_forwarding => F@_1}
    end.

d_field_put_port_forwarding_request_port_forwarding(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_put_port_forwarding_request_port_forwarding(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_put_port_forwarding_request_port_forwarding(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_port_forwarding(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_put_port_forwarding_request(RestF,
                                                   0,
                                                   0,
                                                   F,
                                                   if Prev == '$undef' -> NewFValue;
                                                      true -> merge_msg_port_forwarding(Prev, NewFValue, TrUserData)
                                                   end,
                                                   F@_2,
                                                   TrUserData).

d_field_put_port_forwarding_request_host(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_put_port_forwarding_request_host(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_put_port_forwarding_request_host(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_put_port_forwarding_request(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_put_port_forwarding_request(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_put_port_forwarding_request(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_put_port_forwarding_request(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_put_port_forwarding_request(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_put_port_forwarding_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_put_port_forwarding_request(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_put_port_forwarding_request(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_put_port_forwarding_request(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_put_port_forwarding_request(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_put_port_forwarding_request(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_put_port_forwarding_request(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_put_port_forwarding_request(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_put_port_forwarding_request(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_put_port_forwarding_request(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_empty(Bin, TrUserData) -> dfp_read_field_def_empty(Bin, 0, 0, 0, TrUserData).

dfp_read_field_def_empty(<<>>, 0, 0, _, _) -> #{};
dfp_read_field_def_empty(Other, Z1, Z2, F, TrUserData) -> dg_read_field_def_empty(Other, Z1, Z2, F, TrUserData).

dg_read_field_def_empty(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 32 - 7 -> dg_read_field_def_empty(Rest, N + 7, X bsl N + Acc, F, TrUserData);
dg_read_field_def_empty(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 -> skip_varint_empty(Rest, 0, 0, Key bsr 3, TrUserData);
        1 -> skip_64_empty(Rest, 0, 0, Key bsr 3, TrUserData);
        2 -> skip_length_delimited_empty(Rest, 0, 0, Key bsr 3, TrUserData);
        3 -> skip_group_empty(Rest, 0, 0, Key bsr 3, TrUserData);
        5 -> skip_32_empty(Rest, 0, 0, Key bsr 3, TrUserData)
    end;
dg_read_field_def_empty(<<>>, 0, 0, _, _) -> #{}.

skip_varint_empty(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> skip_varint_empty(Rest, Z1, Z2, F, TrUserData);
skip_varint_empty(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_empty(Rest, Z1, Z2, F, TrUserData).

skip_length_delimited_empty(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 57 -> skip_length_delimited_empty(Rest, N + 7, X bsl N + Acc, F, TrUserData);
skip_length_delimited_empty(<<0:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_empty(Rest2, 0, 0, F, TrUserData).

skip_group_empty(Bin, _, Z2, FNum, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_empty(Rest, 0, Z2, FNum, TrUserData).

skip_32_empty(<<_:32, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_empty(Rest, Z1, Z2, F, TrUserData).

skip_64_empty(<<_:64, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_empty(Rest, Z1, Z2, F, TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) -> merge_msgs(Prev, New, MsgName, []).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        port_forwarding_identifier -> merge_msg_port_forwarding_identifier(Prev, New, TrUserData);
        port_forwarding -> merge_msg_port_forwarding(Prev, New, TrUserData);
        list_port_forwardings_request -> merge_msg_list_port_forwardings_request(Prev, New, TrUserData);
        list_port_forwardings_response -> merge_msg_list_port_forwardings_response(Prev, New, TrUserData);
        put_port_forwarding_request -> merge_msg_put_port_forwarding_request(Prev, New, TrUserData);
        empty -> merge_msg_empty(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_port_forwarding_identifier/3}).
merge_msg_port_forwarding_identifier(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{host := NFhost}} -> S1#{host => NFhost};
             {#{host := PFhost}, _} -> S1#{host => PFhost};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{protocol := NFprotocol}} -> S2#{protocol => NFprotocol};
             {#{protocol := PFprotocol}, _} -> S2#{protocol => PFprotocol};
             _ -> S2
         end,
    case {PMsg, NMsg} of
        {_, #{source_port := NFsource_port}} -> S3#{source_port => NFsource_port};
        {#{source_port := PFsource_port}, _} -> S3#{source_port => PFsource_port};
        _ -> S3
    end.

-compile({nowarn_unused_function,merge_msg_port_forwarding/3}).
merge_msg_port_forwarding(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{protocol := NFprotocol}} -> S1#{protocol => NFprotocol};
             {#{protocol := PFprotocol}, _} -> S1#{protocol => PFprotocol};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{source_port := NFsource_port}} -> S2#{source_port => NFsource_port};
             {#{source_port := PFsource_port}, _} -> S2#{source_port => PFsource_port};
             _ -> S2
         end,
    S4 = case {PMsg, NMsg} of
             {_, #{target_ip := NFtarget_ip}} -> S3#{target_ip => NFtarget_ip};
             {#{target_ip := PFtarget_ip}, _} -> S3#{target_ip => PFtarget_ip};
             _ -> S3
         end,
    case {PMsg, NMsg} of
        {_, #{target_port := NFtarget_port}} -> S4#{target_port => NFtarget_port};
        {#{target_port := PFtarget_port}, _} -> S4#{target_port => PFtarget_port};
        _ -> S4
    end.

-compile({nowarn_unused_function,merge_msg_list_port_forwardings_request/3}).
merge_msg_list_port_forwardings_request(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{host := NFhost}} -> S1#{host => NFhost};
        {#{host := PFhost}, _} -> S1#{host => PFhost};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_list_port_forwardings_response/3}).
merge_msg_list_port_forwardings_response(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {#{port_forwardings := PFport_forwardings}, #{port_forwardings := NFport_forwardings}} -> S1#{port_forwardings => 'erlang_++'(PFport_forwardings, NFport_forwardings, TrUserData)};
        {_, #{port_forwardings := NFport_forwardings}} -> S1#{port_forwardings => NFport_forwardings};
        {#{port_forwardings := PFport_forwardings}, _} -> S1#{port_forwardings => PFport_forwardings};
        {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_put_port_forwarding_request/3}).
merge_msg_put_port_forwarding_request(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {#{port_forwarding := PFport_forwarding}, #{port_forwarding := NFport_forwarding}} -> S1#{port_forwarding => merge_msg_port_forwarding(PFport_forwarding, NFport_forwarding, TrUserData)};
             {_, #{port_forwarding := NFport_forwarding}} -> S1#{port_forwarding => NFport_forwarding};
             {#{port_forwarding := PFport_forwarding}, _} -> S1#{port_forwarding => PFport_forwarding};
             {_, _} -> S1
         end,
    case {PMsg, NMsg} of
        {_, #{host := NFhost}} -> S2#{host => NFhost};
        {#{host := PFhost}, _} -> S2#{host => PFhost};
        _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_empty/3}).
merge_msg_empty(_Prev, New, _TrUserData) -> New.


verify_msg(Msg, MsgName) when is_atom(MsgName) -> verify_msg(Msg, MsgName, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        port_forwarding_identifier -> v_msg_port_forwarding_identifier(Msg, [MsgName], TrUserData);
        port_forwarding -> v_msg_port_forwarding(Msg, [MsgName], TrUserData);
        list_port_forwardings_request -> v_msg_list_port_forwardings_request(Msg, [MsgName], TrUserData);
        list_port_forwardings_response -> v_msg_list_port_forwardings_response(Msg, [MsgName], TrUserData);
        put_port_forwarding_request -> v_msg_put_port_forwarding_request(Msg, [MsgName], TrUserData);
        empty -> v_msg_empty(Msg, [MsgName], TrUserData);
        _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_port_forwarding_identifier/3}).
-dialyzer({nowarn_function,v_msg_port_forwarding_identifier/3}).
v_msg_port_forwarding_identifier(#{} = M, Path, TrUserData) ->
    case M of
        #{host := F1} -> v_type_string(F1, [host | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{protocol := F2} -> v_type_string(F2, [protocol | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{source_port := F3} -> v_type_uint32(F3, [source_port | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (host) -> ok;
                      (protocol) -> ok;
                      (source_port) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_port_forwarding_identifier(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), port_forwarding_identifier}, M, Path);
v_msg_port_forwarding_identifier(X, Path, _TrUserData) -> mk_type_error({expected_msg, port_forwarding_identifier}, X, Path).

-compile({nowarn_unused_function,v_msg_port_forwarding/3}).
-dialyzer({nowarn_function,v_msg_port_forwarding/3}).
v_msg_port_forwarding(#{} = M, Path, TrUserData) ->
    case M of
        #{protocol := F1} -> v_type_string(F1, [protocol | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{source_port := F2} -> v_type_uint32(F2, [source_port | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{target_ip := F3} -> v_type_string(F3, [target_ip | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{target_port := F4} -> v_type_uint32(F4, [target_port | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (protocol) -> ok;
                      (source_port) -> ok;
                      (target_ip) -> ok;
                      (target_port) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_port_forwarding(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), port_forwarding}, M, Path);
v_msg_port_forwarding(X, Path, _TrUserData) -> mk_type_error({expected_msg, port_forwarding}, X, Path).

-compile({nowarn_unused_function,v_msg_list_port_forwardings_request/3}).
-dialyzer({nowarn_function,v_msg_list_port_forwardings_request/3}).
v_msg_list_port_forwardings_request(#{} = M, Path, TrUserData) ->
    case M of
        #{host := F1} -> v_type_string(F1, [host | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (host) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_list_port_forwardings_request(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), list_port_forwardings_request}, M, Path);
v_msg_list_port_forwardings_request(X, Path, _TrUserData) -> mk_type_error({expected_msg, list_port_forwardings_request}, X, Path).

-compile({nowarn_unused_function,v_msg_list_port_forwardings_response/3}).
-dialyzer({nowarn_function,v_msg_list_port_forwardings_response/3}).
v_msg_list_port_forwardings_response(#{} = M, Path, TrUserData) ->
    case M of
        #{port_forwardings := F1} ->
            if is_list(F1) ->
                   _ = [v_msg_port_forwarding(Elem, [port_forwardings | Path], TrUserData) || Elem <- F1],
                   ok;
               true -> mk_type_error({invalid_list_of, {msg, port_forwarding}}, F1, [port_forwardings | Path])
            end;
        _ -> ok
    end,
    lists:foreach(fun (port_forwardings) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_list_port_forwardings_response(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), list_port_forwardings_response}, M, Path);
v_msg_list_port_forwardings_response(X, Path, _TrUserData) -> mk_type_error({expected_msg, list_port_forwardings_response}, X, Path).

-compile({nowarn_unused_function,v_msg_put_port_forwarding_request/3}).
-dialyzer({nowarn_function,v_msg_put_port_forwarding_request/3}).
v_msg_put_port_forwarding_request(#{} = M, Path, TrUserData) ->
    case M of
        #{port_forwarding := F1} -> v_msg_port_forwarding(F1, [port_forwarding | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{host := F2} -> v_type_string(F2, [host | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (port_forwarding) -> ok;
                      (host) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_put_port_forwarding_request(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), put_port_forwarding_request}, M, Path);
v_msg_put_port_forwarding_request(X, Path, _TrUserData) -> mk_type_error({expected_msg, put_port_forwarding_request}, X, Path).

-compile({nowarn_unused_function,v_msg_empty/3}).
-dialyzer({nowarn_function,v_msg_empty/3}).
v_msg_empty(#{} = M, Path, _) ->
    lists:foreach(fun (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path) end, maps:keys(M)),
    ok;
v_msg_empty(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), empty}, M, Path);
v_msg_empty(X, Path, _TrUserData) -> mk_type_error({expected_msg, empty}, X, Path).

-compile({nowarn_unused_function,v_type_uint32/3}).
-dialyzer({nowarn_function,v_type_uint32/3}).
v_type_uint32(N, _Path, _TrUserData) when 0 =< N, N =< 4294967295 -> ok;
v_type_uint32(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, uint32, unsigned, 32}, N, Path);
v_type_uint32(X, Path, _TrUserData) -> mk_type_error({bad_integer, uint32, unsigned, 32}, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
        B when is_binary(B) -> ok;
        {error, _, _} -> mk_type_error(bad_unicode_string, S, Path)
    catch
        error:badarg -> mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) -> mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error, {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) -> lists:append(lists:join(".", lists:map(fun atom_to_list/1, lists:reverse(PathR)))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.


get_msg_defs() ->
    [{{msg, port_forwarding_identifier},
      [#{name => host, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []},
       #{name => protocol, fnum => 2, rnum => 3, type => string, occurrence => optional, opts => []},
       #{name => source_port, fnum => 3, rnum => 4, type => uint32, occurrence => optional, opts => []}]},
     {{msg, port_forwarding},
      [#{name => protocol, fnum => 2, rnum => 2, type => string, occurrence => optional, opts => []},
       #{name => source_port, fnum => 3, rnum => 3, type => uint32, occurrence => optional, opts => []},
       #{name => target_ip, fnum => 4, rnum => 4, type => string, occurrence => optional, opts => []},
       #{name => target_port, fnum => 5, rnum => 5, type => uint32, occurrence => optional, opts => []}]},
     {{msg, list_port_forwardings_request}, [#{name => host, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []}]},
     {{msg, list_port_forwardings_response}, [#{name => port_forwardings, fnum => 1, rnum => 2, type => {msg, port_forwarding}, occurrence => repeated, opts => []}]},
     {{msg, put_port_forwarding_request}, [#{name => port_forwarding, fnum => 1, rnum => 2, type => {msg, port_forwarding}, occurrence => optional, opts => []}, #{name => host, fnum => 2, rnum => 3, type => string, occurrence => optional, opts => []}]},
     {{msg, empty}, []}].


get_msg_names() -> [port_forwarding_identifier, port_forwarding, list_port_forwardings_request, list_port_forwardings_response, put_port_forwarding_request, empty].


get_group_names() -> [].


get_msg_or_group_names() -> [port_forwarding_identifier, port_forwarding, list_port_forwardings_request, list_port_forwardings_response, put_port_forwarding_request, empty].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
        Fs when is_list(Fs) -> Fs;
        error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) -> erlang:error({no_such_enum, EnumName}).


find_msg_def(port_forwarding_identifier) ->
    [#{name => host, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []},
     #{name => protocol, fnum => 2, rnum => 3, type => string, occurrence => optional, opts => []},
     #{name => source_port, fnum => 3, rnum => 4, type => uint32, occurrence => optional, opts => []}];
find_msg_def(port_forwarding) ->
    [#{name => protocol, fnum => 2, rnum => 2, type => string, occurrence => optional, opts => []},
     #{name => source_port, fnum => 3, rnum => 3, type => uint32, occurrence => optional, opts => []},
     #{name => target_ip, fnum => 4, rnum => 4, type => string, occurrence => optional, opts => []},
     #{name => target_port, fnum => 5, rnum => 5, type => uint32, occurrence => optional, opts => []}];
find_msg_def(list_port_forwardings_request) -> [#{name => host, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []}];
find_msg_def(list_port_forwardings_response) -> [#{name => port_forwardings, fnum => 1, rnum => 2, type => {msg, port_forwarding}, occurrence => repeated, opts => []}];
find_msg_def(put_port_forwarding_request) ->
    [#{name => port_forwarding, fnum => 1, rnum => 2, type => {msg, port_forwarding}, occurrence => optional, opts => []}, #{name => host, fnum => 2, rnum => 3, type => string, occurrence => optional, opts => []}];
find_msg_def(empty) -> [];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) -> erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) -> erlang:error({no_enum_defs, E, V}).



get_service_names() -> ['PortForwardingService'].


get_service_def('PortForwardingService') ->
    {{service, 'PortForwardingService'},
     [#{name => 'GetPortForwarding', input => port_forwarding_identifier, output => port_forwarding, input_stream => false, output_stream => false, opts => []},
      #{name => 'ListPortForwardings', input => list_port_forwardings_request, output => list_port_forwardings_response, input_stream => false, output_stream => false, opts => []},
      #{name => 'PutPortForwarding', input => put_port_forwarding_request, output => port_forwarding, input_stream => false, output_stream => false, opts => []},
      #{name => 'DeletePortForwarding', input => port_forwarding_identifier, output => empty, input_stream => false, output_stream => false, opts => []}]};
get_service_def(_) -> error.


get_rpc_names('PortForwardingService') -> ['GetPortForwarding', 'ListPortForwardings', 'PutPortForwarding', 'DeletePortForwarding'];
get_rpc_names(_) -> error.


find_rpc_def('PortForwardingService', RpcName) -> find_rpc_def_PortForwardingService(RpcName);
find_rpc_def(_, _) -> error.


find_rpc_def_PortForwardingService('GetPortForwarding') -> #{name => 'GetPortForwarding', input => port_forwarding_identifier, output => port_forwarding, input_stream => false, output_stream => false, opts => []};
find_rpc_def_PortForwardingService('ListPortForwardings') -> #{name => 'ListPortForwardings', input => list_port_forwardings_request, output => list_port_forwardings_response, input_stream => false, output_stream => false, opts => []};
find_rpc_def_PortForwardingService('PutPortForwarding') -> #{name => 'PutPortForwarding', input => put_port_forwarding_request, output => port_forwarding, input_stream => false, output_stream => false, opts => []};
find_rpc_def_PortForwardingService('DeletePortForwarding') -> #{name => 'DeletePortForwarding', input => port_forwarding_identifier, output => empty, input_stream => false, output_stream => false, opts => []};
find_rpc_def_PortForwardingService(_) -> error.


fetch_rpc_def(ServiceName, RpcName) ->
    case find_rpc_def(ServiceName, RpcName) of
        Def when is_map(Def) -> Def;
        error -> erlang:error({no_such_rpc, ServiceName, RpcName})
    end.


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
fqbin_to_service_name(<<"PortForwardingService">>) -> 'PortForwardingService';
fqbin_to_service_name(X) -> error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
service_name_to_fqbin('PortForwardingService') -> <<"PortForwardingService">>;
service_name_to_fqbin(X) -> error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
fqbins_to_service_and_rpc_name(<<"PortForwardingService">>, <<"GetPortForwarding">>) -> {'PortForwardingService', 'GetPortForwarding'};
fqbins_to_service_and_rpc_name(<<"PortForwardingService">>, <<"ListPortForwardings">>) -> {'PortForwardingService', 'ListPortForwardings'};
fqbins_to_service_and_rpc_name(<<"PortForwardingService">>, <<"PutPortForwarding">>) -> {'PortForwardingService', 'PutPortForwarding'};
fqbins_to_service_and_rpc_name(<<"PortForwardingService">>, <<"DeletePortForwarding">>) -> {'PortForwardingService', 'DeletePortForwarding'};
fqbins_to_service_and_rpc_name(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
service_and_rpc_name_to_fqbins('PortForwardingService', 'GetPortForwarding') -> {<<"PortForwardingService">>, <<"GetPortForwarding">>};
service_and_rpc_name_to_fqbins('PortForwardingService', 'ListPortForwardings') -> {<<"PortForwardingService">>, <<"ListPortForwardings">>};
service_and_rpc_name_to_fqbins('PortForwardingService', 'PutPortForwarding') -> {<<"PortForwardingService">>, <<"PutPortForwarding">>};
service_and_rpc_name_to_fqbins('PortForwardingService', 'DeletePortForwarding') -> {<<"PortForwardingService">>, <<"DeletePortForwarding">>};
service_and_rpc_name_to_fqbins(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"PortForwardingIdentifier">>) -> port_forwarding_identifier;
fqbin_to_msg_name(<<"PortForwarding">>) -> port_forwarding;
fqbin_to_msg_name(<<"ListPortForwardingsRequest">>) -> list_port_forwardings_request;
fqbin_to_msg_name(<<"ListPortForwardingsResponse">>) -> list_port_forwardings_response;
fqbin_to_msg_name(<<"PutPortForwardingRequest">>) -> put_port_forwarding_request;
fqbin_to_msg_name(<<"google.protobuf.Empty">>) -> empty;
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin(port_forwarding_identifier) -> <<"PortForwardingIdentifier">>;
msg_name_to_fqbin(port_forwarding) -> <<"PortForwarding">>;
msg_name_to_fqbin(list_port_forwardings_request) -> <<"ListPortForwardingsRequest">>;
msg_name_to_fqbin(list_port_forwardings_response) -> <<"ListPortForwardingsResponse">>;
msg_name_to_fqbin(put_port_forwarding_request) -> <<"PutPortForwardingRequest">>;
msg_name_to_fqbin(empty) -> <<"google.protobuf.Empty">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


-spec fqbin_to_enum_name(_) -> no_return().
fqbin_to_enum_name(E) -> error({gpb_error, {badenum, E}}).


-spec enum_name_to_fqbin(_) -> no_return().
enum_name_to_fqbin(E) -> error({gpb_error, {badenum, E}}).


get_package_name() -> 'google.protobuf'.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> true.


source_basename() -> "port_forwarding.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["port_forwarding.proto", "empty.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["port_forwarding", "empty"].


get_msg_containment("port_forwarding") -> [list_port_forwardings_request, list_port_forwardings_response, port_forwarding, port_forwarding_identifier, put_port_forwarding_request];
get_msg_containment("empty") -> [empty];
get_msg_containment(P) -> error({gpb_error, {badproto, P}}).


get_pkg_containment("port_forwarding") -> undefined;
get_pkg_containment("empty") -> 'google.protobuf';
get_pkg_containment(P) -> error({gpb_error, {badproto, P}}).


get_service_containment("port_forwarding") -> ['PortForwardingService'];
get_service_containment("empty") -> [];
get_service_containment(P) -> error({gpb_error, {badproto, P}}).


get_rpc_containment("port_forwarding") -> [{'PortForwardingService', 'GetPortForwarding'}, {'PortForwardingService', 'ListPortForwardings'}, {'PortForwardingService', 'PutPortForwarding'}, {'PortForwardingService', 'DeletePortForwarding'}];
get_rpc_containment("empty") -> [];
get_rpc_containment(P) -> error({gpb_error, {badproto, P}}).


get_enum_containment("port_forwarding") -> [];
get_enum_containment("empty") -> [];
get_enum_containment(P) -> error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"PortForwardingIdentifier">>) -> "port_forwarding";
get_proto_by_msg_name_as_fqbin(<<"PutPortForwardingRequest">>) -> "port_forwarding";
get_proto_by_msg_name_as_fqbin(<<"ListPortForwardingsRequest">>) -> "port_forwarding";
get_proto_by_msg_name_as_fqbin(<<"ListPortForwardingsResponse">>) -> "port_forwarding";
get_proto_by_msg_name_as_fqbin(<<"PortForwarding">>) -> "port_forwarding";
get_proto_by_msg_name_as_fqbin(<<"google.protobuf.Empty">>) -> "empty";
get_proto_by_msg_name_as_fqbin(E) -> error({gpb_error, {badmsg, E}}).


get_proto_by_service_name_as_fqbin(<<"PortForwardingService">>) -> "port_forwarding";
get_proto_by_service_name_as_fqbin(E) -> error({gpb_error, {badservice, E}}).


-spec get_proto_by_enum_name_as_fqbin(_) -> no_return().
get_proto_by_enum_name_as_fqbin(E) -> error({gpb_error, {badenum, E}}).


get_protos_by_pkg_name_as_fqbin(<<"google.protobuf">>) -> ["empty"];
get_protos_by_pkg_name_as_fqbin(E) -> error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.19.8".

gpb_version_as_list() ->
    [4,19,8].

gpb_version_source() ->
    "file".
