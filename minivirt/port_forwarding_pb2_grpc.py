# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from minivirt import port_forwarding_pb2 as minivirt_dot_port__forwarding__pb2


class PortForwardingServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetPortForwarding = channel.unary_unary(
                '/PortForwardingService/GetPortForwarding',
                request_serializer=minivirt_dot_port__forwarding__pb2.PortForwardingIdentifier.SerializeToString,
                response_deserializer=minivirt_dot_port__forwarding__pb2.PortForwarding.FromString,
                )
        self.ListPortForwardings = channel.unary_unary(
                '/PortForwardingService/ListPortForwardings',
                request_serializer=minivirt_dot_port__forwarding__pb2.ListPortForwardingsRequest.SerializeToString,
                response_deserializer=minivirt_dot_port__forwarding__pb2.ListPortForwardingsResponse.FromString,
                )
        self.PutPortForwarding = channel.unary_unary(
                '/PortForwardingService/PutPortForwarding',
                request_serializer=minivirt_dot_port__forwarding__pb2.PutPortForwardingRequest.SerializeToString,
                response_deserializer=minivirt_dot_port__forwarding__pb2.PortForwarding.FromString,
                )
        self.DeletePortForwarding = channel.unary_unary(
                '/PortForwardingService/DeletePortForwarding',
                request_serializer=minivirt_dot_port__forwarding__pb2.PortForwardingIdentifier.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )


class PortForwardingServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetPortForwarding(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListPortForwardings(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PutPortForwarding(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeletePortForwarding(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PortForwardingServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetPortForwarding': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPortForwarding,
                    request_deserializer=minivirt_dot_port__forwarding__pb2.PortForwardingIdentifier.FromString,
                    response_serializer=minivirt_dot_port__forwarding__pb2.PortForwarding.SerializeToString,
            ),
            'ListPortForwardings': grpc.unary_unary_rpc_method_handler(
                    servicer.ListPortForwardings,
                    request_deserializer=minivirt_dot_port__forwarding__pb2.ListPortForwardingsRequest.FromString,
                    response_serializer=minivirt_dot_port__forwarding__pb2.ListPortForwardingsResponse.SerializeToString,
            ),
            'PutPortForwarding': grpc.unary_unary_rpc_method_handler(
                    servicer.PutPortForwarding,
                    request_deserializer=minivirt_dot_port__forwarding__pb2.PutPortForwardingRequest.FromString,
                    response_serializer=minivirt_dot_port__forwarding__pb2.PortForwarding.SerializeToString,
            ),
            'DeletePortForwarding': grpc.unary_unary_rpc_method_handler(
                    servicer.DeletePortForwarding,
                    request_deserializer=minivirt_dot_port__forwarding__pb2.PortForwardingIdentifier.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'PortForwardingService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PortForwardingService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetPortForwarding(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PortForwardingService/GetPortForwarding',
            minivirt_dot_port__forwarding__pb2.PortForwardingIdentifier.SerializeToString,
            minivirt_dot_port__forwarding__pb2.PortForwarding.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListPortForwardings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PortForwardingService/ListPortForwardings',
            minivirt_dot_port__forwarding__pb2.ListPortForwardingsRequest.SerializeToString,
            minivirt_dot_port__forwarding__pb2.ListPortForwardingsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PutPortForwarding(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PortForwardingService/PutPortForwarding',
            minivirt_dot_port__forwarding__pb2.PutPortForwardingRequest.SerializeToString,
            minivirt_dot_port__forwarding__pb2.PortForwarding.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeletePortForwarding(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PortForwardingService/DeletePortForwarding',
            minivirt_dot_port__forwarding__pb2.PortForwardingIdentifier.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
