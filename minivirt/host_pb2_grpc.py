# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from minivirt import host_pb2 as minivirt_dot_host__pb2


class HostServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateBootstrapToken = channel.unary_unary(
                '/HostService/CreateBootstrapToken',
                request_serializer=minivirt_dot_host__pb2.CreateBootstrapTokenRequest.SerializeToString,
                response_deserializer=minivirt_dot_host__pb2.CreateBootstrapTokenResponse.FromString,
                )
        self.GetHost = channel.unary_unary(
                '/HostService/GetHost',
                request_serializer=minivirt_dot_host__pb2.Host.SerializeToString,
                response_deserializer=minivirt_dot_host__pb2.Host.FromString,
                )
        self.ListHosts = channel.unary_unary(
                '/HostService/ListHosts',
                request_serializer=minivirt_dot_host__pb2.ListHostsRequest.SerializeToString,
                response_deserializer=minivirt_dot_host__pb2.ListHostsResponse.FromString,
                )
        self.Register = channel.unary_unary(
                '/HostService/Register',
                request_serializer=minivirt_dot_host__pb2.RegisterHostRequest.SerializeToString,
                response_deserializer=minivirt_dot_host__pb2.Host.FromString,
                )
        self.Deregister = channel.unary_unary(
                '/HostService/Deregister',
                request_serializer=minivirt_dot_host__pb2.Host.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.Heartbeat = channel.unary_unary(
                '/HostService/Heartbeat',
                request_serializer=minivirt_dot_host__pb2.HeartbeatRequest.SerializeToString,
                response_deserializer=minivirt_dot_host__pb2.HeartbeatResponse.FromString,
                )


class HostServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateBootstrapToken(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetHost(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListHosts(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Register(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Deregister(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Heartbeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HostServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateBootstrapToken': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateBootstrapToken,
                    request_deserializer=minivirt_dot_host__pb2.CreateBootstrapTokenRequest.FromString,
                    response_serializer=minivirt_dot_host__pb2.CreateBootstrapTokenResponse.SerializeToString,
            ),
            'GetHost': grpc.unary_unary_rpc_method_handler(
                    servicer.GetHost,
                    request_deserializer=minivirt_dot_host__pb2.Host.FromString,
                    response_serializer=minivirt_dot_host__pb2.Host.SerializeToString,
            ),
            'ListHosts': grpc.unary_unary_rpc_method_handler(
                    servicer.ListHosts,
                    request_deserializer=minivirt_dot_host__pb2.ListHostsRequest.FromString,
                    response_serializer=minivirt_dot_host__pb2.ListHostsResponse.SerializeToString,
            ),
            'Register': grpc.unary_unary_rpc_method_handler(
                    servicer.Register,
                    request_deserializer=minivirt_dot_host__pb2.RegisterHostRequest.FromString,
                    response_serializer=minivirt_dot_host__pb2.Host.SerializeToString,
            ),
            'Deregister': grpc.unary_unary_rpc_method_handler(
                    servicer.Deregister,
                    request_deserializer=minivirt_dot_host__pb2.Host.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'Heartbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.Heartbeat,
                    request_deserializer=minivirt_dot_host__pb2.HeartbeatRequest.FromString,
                    response_serializer=minivirt_dot_host__pb2.HeartbeatResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'HostService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class HostService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateBootstrapToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/HostService/CreateBootstrapToken',
            minivirt_dot_host__pb2.CreateBootstrapTokenRequest.SerializeToString,
            minivirt_dot_host__pb2.CreateBootstrapTokenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetHost(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/HostService/GetHost',
            minivirt_dot_host__pb2.Host.SerializeToString,
            minivirt_dot_host__pb2.Host.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListHosts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/HostService/ListHosts',
            minivirt_dot_host__pb2.ListHostsRequest.SerializeToString,
            minivirt_dot_host__pb2.ListHostsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/HostService/Register',
            minivirt_dot_host__pb2.RegisterHostRequest.SerializeToString,
            minivirt_dot_host__pb2.Host.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Deregister(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/HostService/Deregister',
            minivirt_dot_host__pb2.Host.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Heartbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/HostService/Heartbeat',
            minivirt_dot_host__pb2.HeartbeatRequest.SerializeToString,
            minivirt_dot_host__pb2.HeartbeatResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
